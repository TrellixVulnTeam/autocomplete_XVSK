{
  "_args": [
    [
      {
        "raw": "retry-request@^2.0.0",
        "scope": null,
        "escapedName": "retry-request",
        "name": "retry-request",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/kunalpariani/Projects/autocomplete/node_modules/@google-cloud/spanner/node_modules/@google-cloud/common"
    ]
  ],
  "_from": "retry-request@>=2.0.0 <3.0.0",
  "_id": "retry-request@2.0.2",
  "_inCache": true,
  "_location": "/@google-cloud/spanner/retry-request",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/retry-request-2.0.2.tgz_1494697693274_0.6713045253418386"
  },
  "_npmUser": {
    "name": "stephenplusplus",
    "email": "sawchuk@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "retry-request@^2.0.0",
    "scope": null,
    "escapedName": "retry-request",
    "name": "retry-request",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@google-cloud/spanner/@google-cloud/common",
    "/@google-cloud/spanner/@google-cloud/common-grpc"
  ],
  "_resolved": "https://registry.npmjs.org/retry-request/-/retry-request-2.0.2.tgz",
  "_shasum": "8f5ff4facc526fdeb8262ac6314e6becee9e3325",
  "_shrinkwrap": null,
  "_spec": "retry-request@^2.0.0",
  "_where": "/Users/kunalpariani/Projects/autocomplete/node_modules/@google-cloud/spanner/node_modules/@google-cloud/common",
  "author": {
    "name": "Stephen Sawchuk",
    "email": "sawchuk@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/stephenplusplus/retry-request/issues"
  },
  "dependencies": {
    "request": "^2.81.0",
    "through2": "^2.0.0"
  },
  "description": "Retry a request.",
  "devDependencies": {
    "mocha": "^2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "8f5ff4facc526fdeb8262ac6314e6becee9e3325",
    "tarball": "https://registry.npmjs.org/retry-request/-/retry-request-2.0.2.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js",
    "license"
  ],
  "gitHead": "d02ca5adf6e3164abbbd6128edd59c7e2358ae63",
  "homepage": "https://github.com/stephenplusplus/retry-request#readme",
  "keywords": [
    "request",
    "retry",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "stephenplusplus",
      "email": "sawchuk@gmail.com"
    }
  ],
  "name": "retry-request",
  "optionalDependencies": {},
  "readme": "|![retry-request](logo.png)\r\n|:-:\r\n|Retry a [request][request] with built-in [exponential backoff](https://developers.google.com/analytics/devguides/reporting/core/v3/coreErrors#backoff).\r\n\r\n```sh\r\n$ npm install --save retry-request\r\n```\r\n```js\r\nvar request = require('retry-request');\r\n```\r\n\r\nIt should work the same as `request` in both callback mode and stream mode.\r\n\r\nNote: This module only works when used as a readable stream, i.e. POST requests aren't supported  ([#3](https://github.com/stephenplusplus/retry-request/issues/3)).\r\n\r\n#### Callback\r\n\r\n`urlThatReturns503` will be requested 3 total times before giving up and executing the callback.\r\n\r\n```js\r\nrequest(urlThatReturns503, function (err, resp, body) {});\r\n```\r\n\r\n#### Stream\r\n\r\n`urlThatReturns503` will be requested 3 total times before giving up and emitting the `response` and `complete` event as usual.\r\n\r\n```js\r\nrequest(urlThatReturns503)\r\n  .on('error', function () {})\r\n  .on('response', function () {})\r\n  .on('complete', function () {});\r\n```\r\n\r\n## request(requestOptions, [opts], [cb])\r\n\r\n### requestOptions\r\n\r\nPassed directly to `request`. See the list of options supported: https://github.com/request/request/#requestoptions-callback.\r\n\r\n### opts *(optional)*\r\n\r\n#### `opts.objectMode`\r\n\r\nType: `Boolean`\r\n\r\nDefault: `false`\r\n\r\nSet to `true` if your custom `opts.request` function returns a stream in object mode.\r\n\r\n#### `opts.retries`\r\n\r\nType: `Number`\r\n\r\nDefault: `2`\r\n\r\n```js\r\nvar opts = {\r\n  retries: 4\r\n};\r\n\r\nrequest(urlThatReturns503, opts, function (err, resp, body) {\r\n  // urlThatReturns503 was requested a total of 5 times\r\n  // before giving up and executing this callback.\r\n});\r\n```\r\n\r\n#### `opts.shouldRetryFn`\r\n\r\nType: `Function`\r\n\r\nDefault: Returns `true` if [http.incomingMessage](https://nodejs.org/api/http.html#http_http_incomingmessage).statusCode is < 200 or >= 400.\r\n\r\n```js\r\nvar opts = {\r\n  shouldRetryFn: function (incomingHttpMessage) {\r\n    return incomingHttpMessage.statusMessage !== 'OK';\r\n  }\r\n};\r\n\r\nrequest(urlThatReturnsNonOKStatusMessage, opts, function (err, resp, body) {\r\n  // urlThatReturnsNonOKStatusMessage was requested a\r\n  // total of 3 times, each time using `opts.shouldRetryFn`\r\n  // to decide if it should continue before giving up and\r\n  // executing this callback.\r\n});\r\n```\r\n\r\n#### `opts.request`\r\n\r\nType: `Function`\r\n\r\nDefault: [`request`][request]\r\n\r\n*NOTE: If you override the request function, and it returns a stream in object mode, be sure to set `opts.objectMode` to `true`.*\r\n\r\n```js\r\nvar originalRequest = require('request').defaults({\r\n  pool: {\r\n    maxSockets: Infinity\r\n  }\r\n});\r\n\r\nvar opts = {\r\n  request: originalRequest\r\n};\r\n\r\nrequest(urlThatReturns503, opts, function (err, resp, body) {\r\n  // Your provided `originalRequest` instance was used.\r\n});\r\n```\r\n\r\n### cb *(optional)*\r\n\r\nPassed directly to `request`. See the callback section: https://github.com/request/request/#requestoptions-callback.\r\n\r\n[request]: https://github.com/request/request\r\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stephenplusplus/retry-request.git"
  },
  "scripts": {
    "test": "mocha --timeout 0"
  },
  "version": "2.0.2"
}
