{
  "_args": [
    [
      {
        "raw": "logops@^2.0.0",
        "scope": null,
        "escapedName": "logops",
        "name": "logops",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/kunalpariani/Projects/autocomplete"
    ]
  ],
  "_from": "logops@>=2.0.0 <3.0.0",
  "_id": "logops@2.0.0",
  "_inCache": true,
  "_location": "/logops",
  "_nodeVersion": "6.10.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/logops-2.0.0.tgz_1493836239551_0.06280668172985315"
  },
  "_npmUser": {
    "name": "jmendiara",
    "email": "jmendiara@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "lodash": "4.17.4"
  },
  "_requested": {
    "raw": "logops@^2.0.0",
    "scope": null,
    "escapedName": "logops",
    "name": "logops",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/logops/-/logops-2.0.0.tgz",
  "_shasum": "e1f9c018ec15ea1ed9eb194a25575470aed34a5c",
  "_shrinkwrap": null,
  "_spec": "logops@^2.0.0",
  "_where": "/Users/kunalpariani/Projects/autocomplete",
  "author": {
    "name": "Javier Mendiara Cañardo",
    "email": "javier.mendiaracanardo@telefonica.com"
  },
  "bugs": {
    "url": "https://github.com/telefonicaid/logops/issues"
  },
  "contributors": [
    {
      "name": "Juan Antonio Hernando Labajo",
      "email": "juanantonio.hernandolabajo@telefonica.com"
    },
    {
      "name": "Guido García Bernardo",
      "email": "guido.garciabernardo@telefonica.com"
    },
    {
      "name": "Germán Toro del Valle",
      "email": "german.torodelvalle@telefonica.com"
    },
    {
      "name": "Daniel Morán Jiménez",
      "email": "daniel.moranjimenez@telefonica.com"
    },
    {
      "name": "Juan de Bravo Diez",
      "email": "juande.bravodiez@telefonica.com"
    }
  ],
  "dependencies": {
    "colors": "^1.1.2",
    "json-stringify-safe": "^5.0.1",
    "lodash": "^4.1.0",
    "serr": "^1.0.0"
  },
  "description": "Simple and performant nodejs JSON logger",
  "devDependencies": {
    "@types/node": "^6.0.42",
    "chai": "^3.0.0",
    "conventional-changelog-cli": "^1.1.0",
    "coveralls": "^2.11.2",
    "eslint": "^2.2.0",
    "istanbul": "^0.4.0",
    "jscs": "^3.0.3",
    "mocha": "^2.2.5",
    "release-it": "^2.3.1",
    "sinon": "^1.15.0",
    "sinon-chai": "^2.8.0",
    "tslint": "^3.14.0",
    "tslint-config-typings": "^0.2.3",
    "typescript": "^2.0.3"
  },
  "directories": {},
  "dist": {
    "shasum": "e1f9c018ec15ea1ed9eb194a25575470aed34a5c",
    "tarball": "https://registry.npmjs.org/logops/-/logops-2.0.0.tgz"
  },
  "engines": {
    "node": ">=6"
  },
  "gitHead": "0206cd46024dbd3863404001d4d996cef3267262",
  "homepage": "https://github.com/telefonicaid/logops",
  "keywords": [
    "logger",
    "simple",
    "performant"
  ],
  "license": "Apache-2.0",
  "main": "lib/logops",
  "maintainers": [
    {
      "name": "gtorodelvalle",
      "email": "gtorodelvalle@gmail.com"
    },
    {
      "name": "jmendiara",
      "email": "jmendiara@gmail.com"
    },
    {
      "name": "palmerabollo",
      "email": "palmerabollo@gmail.com"
    }
  ],
  "name": "logops",
  "optionalDependencies": {},
  "readme": "# logops\n\nReally simple and performant JSON logger for node.js.\n\n[![npm version](https://img.shields.io/npm/v/logops.svg)](http://badge.fury.io/js/logops)\n[![Build Status](https://img.shields.io/travis/telefonicaid/logops.svg)](https://travis-ci.org/telefonicaid/logops)\n[![Coveralls branch](https://img.shields.io/coveralls/telefonicaid/logops/master.svg)](https://coveralls.io/r/telefonicaid/logops?branch=master)\n[![Dependency Status](https://img.shields.io/gemnasium/telefonicaid/logops.svg)](https://gemnasium.com/telefonicaid/logops)\n![Typescript definitions](https://img.shields.io/badge/TypeScript%20Definition-.d.ts-blue.svg)\n\n## Installation\n\n```bash\nnpm install logops\n```\n\n## Basic usage\n\n```js\nvar logger = require('logops');\n\n//plain strings\nlogger.debug('This is an example');\n// {\"time\":\"2015-12-22T16:31:39.220Z\",\"lvl\":\"DEBUG\",\"msg\":\"This is an example\"}\n\n//util.format support\nlogger.info('Request %s %d %j', 'is', 5, {key: 'value'}, 'guy');\n// {\"time\":\"2015-12-22T16:31:56.184Z\",\"lvl\":\"INFO\",\"msg\":\"Request is 5 {\\\"key\\\":\\\"value\\\"} guy\"}\n\n//properties in the log trace\nlogger.warn({ip: '127.0.0.0'}, 'Something went wrong');\n// {\"ip\":\"127.0.0.0\",\"time\":\"2015-12-22T16:33:17.002Z\",\"lvl\":\"WARN\",\"msg\":\"Something went wrong\"}\n\n//special case: error instance to print error info (and stack traces)...\nlogger.error(new TypeError('String required'));\n/* {\"time\":\"2015-12-22T16:36:39.650Z\",\"lvl\":\"ERROR\",\n *  \"err\":{\"message\":\"String required\",\"name\":\"TypeError\",\"constructor\":\"TypeError\",\"stack\":\"TypeError: String required\\n    at...\",\n *  \"msg\":\"TypeError: String required\"} */\n\n//... or specify the message\nlogger.fatal(new Error('Out of memory'), 'SYSTEM UNSTABLE. BYE');\n/* {\"time\":\"2015-12-22T16:45:36.468Z\",\"lvl\":\"FATAL\",\n *  \"err\":{\"message\":\"Out of memory\",\"name\":\"Error\",\"constructor\":\"Error\",\"stack\":\"Error: Out of memory\\n    at...\",\n *  \"msg\":\"SYSTEM UNSTABLE. BYE\"} */\n```\n\n* If you give an object as the first argument, you will print its properties but not a String representation of it. `logger.info(req)` will set all `req` properties in the final json. `logger.info({a:'guy'}) =>\n{\"a\":\"guy\",\"time\":\"2015-12-23T12:09:12.610Z\",\"lvl\":\"INFO\",\"msg\":\"undefined\"}`\n\n* The pattern `logger.error(err)` is very common. This API embraces the requirenment, and makes an special management of it. But getting an error stack trace is not cheap. It only will be get and printed when `log.error` or `log.fatal` is used, so you can use `logger.info(new Error('User Not Found'));` to not print useless stackstraces for your bussiness logic errors. _You can override it, btw_\n\n* With the rest of arguments is just like calling `console.log`. It will be serialized as the trace message. Easy to remember.\n\n## Context support\n\nLogops supports using global properties that will be merged with the specific ones defined in the call. Simply override the `logger.getContext` method to let the logger to get it.\n\n```js\nvar logger = require('logops'),\n    hostname = require('os').hostname();\n\nlogger.getContext = function getContext() {\n  return {\n    hostname: hostname,\n    pid: process.pid\n  };\n}\n\nlogger.info({app: 'server'}, 'Startup');\n// {\"hostname\":\"host.local\",\"pid\":35502,\"app\":\"server\",\"time\":\"2015-12-23T11:47:25.862Z\",\"lvl\":\"INFO\",\"msg\":\"Startup\"}\n```\n\n## Logger Level\n\nYou can set the logging level at any time. All the disabled logging methods are replaced by a noop,\nso there is not any performance penalty at production using an undesired level\n\n```js\nvar logger = require('logops');\n\n// {String} level one of the following values ['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL']\nlogger.setLevel('DEBUG');\n```\n\nYou can also set the logging level using the `LOGOPS_LEVEL` environment variable:\n\n```bash\nexport LOGOPS_LEVEL=DEBUG\n```\n\nYou can get the logging level using the `getLevel()` function of the logger:\n```\ncurrentLevel = logger.getLevel();\n```\n\n## Trace format\n\nThis library incorporates two flavors of trace formatting:\n* \"json\": writes logs as JSON. This is the **DEFAULT in v1.0.0**\n* \"dev\": for development. Used with 'de-facto' NODE_ENV variable is set to 'development'\n* \"pipe\": writes logs separating fields with pipes. **DEPRECATED in v1.0.0** \n\n```js\nlogger.format = logger.formatters.json;\nlogger.info({key:'value'}, 'This is an example: %d', 5);\n// {\"key\":\"value\",\"time\":\"2015-12-23T11:55:27.041Z\",\"lvl\":\"INFO\",\"msg\":\"This is an example: 5\"}\n\nlogger.format = logger.formatters.dev;\nlogger.info({key:'value'}, 'This is an example: %d', 5);\n// INFO  This is an example: 5 { key: 'value' }\n\nlogger.format = logger.formatters.pipe; //DEPRECATED in v1.0.0\nlogger.info({key:'value'}, 'This is an example: %d', 5);\n// time=2015-12-23T11:57:24.879Z | lvl=INFO | corr=n/a | trans=n/a | op=n/a | msg=This is an example: 5\n```\n\nYou can also set the format specifying the formatter with `LOGOPS_FORMAT` environment variable:\n\n```bash\nexport LOGOPS_FORMAT=json\n# export LOGOPS_FORMAT=dev\n```\n\n## Advanced Usage\n\n### Trace format\n\nYou can override the format function and manage by yourself the formatting taking into account your own environment variables by\noverriding the `logger.format` function\n\n### Don't print specific properties with `dev` format \n\nOmit some boring/repeated/always-the-same context properties from being logged with the `dev` formatter:\n\n```js\nlogger.format = logger.formatters.dev;\nlogger.getContext = () => ({ pid: process.pid });\nlogger.info({key:'value', ip:'127.0.0.1'}, 'This is an example: %d', 5);\n// INFO  This is an example: 5 { pid: 123342, key: 'value', ip: '127.0.0.1' }\n\n// Specify the context fields to omit as an array\nlogger.formatters.dev.omit = ['pid', 'ip'];\n\nlogger.info({key:'value', ip:'127.0.0.1'}, 'This is an example: %d', 5);\n// INFO  This is an example: 5 { key: 'value' }\n```\n\n### Don't print Error Stack traces\n\nSet `logger.formatters.stacktracesWith` array with the error levels that will print stacktraces. Default is `stacktracesWith: ['ERROR', 'FATAL']`\n\n### Writing to files\n\nThis library writes by default to `process.stdout`, the safest, fastest and easy way to manage logs. It's how you execute your app when you define how to manage logs.\n\nThis approach is also compatible with [logrotate](http://linuxcommand.org/man_pages/logrotate8.html) as this is how many servers and PaaS manage the logs.\nTherefore you don't need to put __anything__ in your source code relative to logs, and all is done at execution time depending on the deployment.\n\n__Recommended execution:__ Pipelining the stdout to [tee](http://en.wikipedia.org/wiki/Tee_(command)).\nWith this configuration, you will not fail when the disk is full\n\n```bash\n# write all traces to out.log\nset -o pipefail\nnode index.js | tee -a out.log > /dev/null\n```\n\n```bash\n# write error and fatal traces to error.log and all traces to out.log (using json formatter)\nset -o pipefail\nLOGOPS_FORMAT=json node index.js | tee >(grep -a -F -e '\"lvl\":\"ERROR\"' -e '\"lvl\":\"FATAL\"' > error.log) > out.log\n```\n\nYou can also write logs and fail miserably stopping your app when the disk is full by doing\n\n```bash\nnode index.js > out.log\n```\n\nPlease read carefully in the node documentation how the `stdout`/`stderr` stream behaves [regarding synchronous/asynchronous writing](https://nodejs.org/api/process.html#process_process_stdout)\n\nIf you want to pipe the output stream to any other stream in your source code, or even write to files *(not recommended)*,\nyou can override the stream used by this library\n\n```js\nvar logger = require('logops');\nlogger.stream = new MyOtherSuperStreamThatDoesGreatThingsExceptWriteToDisk();\n```\n\n## History\nThis project was created initially for logging using the now deprecated pipe format, used internally at Telefonica by some logging infrastructure deployments.\nNow we are switching to a new one one, based on documents and a NoSQL infrastructure, where the JSON format is the one that \nfits best. We got inspired by the wonderful [`bunyan`](https://github.com/trentm/node-bunyan) project and made some little adjustments in our API\nto be compliant with it, to reduce developer learning curve, make our preexisting code compatible and keep (or even improve) [its great performance](https://www.loggly.com/blog/a-benchmark-of-five-node-js-logging-libraries/).\n  \n\n## Benchmark\nA very basic [benchmark](./benchmark/index.js) with the most common use case has \nbeen setup to compare with [`bunyan`](https://github.com/trentm/node-bunyan)\n\nRunning on a MAC OS X Yosemite, 2,5 GHz Intel Core i5, 8 GB 1333 MHz DDR3, SSD disk, node 4.2.2\n \n```\n$ cd benchmark; npm start\n               \n> benchmarklogops@1.0.0 start /Users/javier/Documents/Proyectos/logops/benchmark\n> npm run tee && npm run file && npm run null && rm out.log\n\n\n> benchmarklogops@1.0.0 tee /Users/javier/Documents/Proyectos/logops/benchmark\n> node index.js | tee -a out.log > /dev/null\n\nlogops x 39,560 ops/sec ±3.00% (75 runs sampled)\nbunyan x 27,365 ops/sec ±2.23% (79 runs sampled)\nBasic logging: Fastest is logops\nlogops x 73,150,310 ops/sec ±1.64% (79 runs sampled)\nbunyan x 1,569,549 ops/sec ±3.67% (78 runs sampled)\nDisabled logging: Fastest is logops\n\n> benchmarklogops@1.0.0 file /Users/javier/Documents/Proyectos/logops/benchmark\n> node index.js > out.log\n\nlogops x 43,136 ops/sec ±1.31% (82 runs sampled)\nbunyan x 28,653 ops/sec ±1.05% (84 runs sampled)\nBasic logging: Fastest is logops\nlogops x 80,439,813 ops/sec ±1.17% (85 runs sampled)\nbunyan x 1,645,447 ops/sec ±1.66% (85 runs sampled)\nDisabled logging: Fastest is logops\n\n> benchmarklogops@1.0.0 null /Users/javier/Documents/Proyectos/logops/benchmark\n> node index.js > /dev/null\n\nlogops x 52,947 ops/sec ±1.80% (80 runs sampled)\nbunyan x 33,696 ops/sec ±0.96% (84 runs sampled)\nBasic logging: Fastest is logops\nlogops x 77,479,942 ops/sec ±1.47% (79 runs sampled)\nbunyan x 1,411,108 ops/sec ±1.92% (85 runs sampled)\nDisabled logging: Fastest is logops\n```\n\n## License\n\nCopyright 2014, 2015 [Telefonica Investigación y Desarrollo, S.A.U](http://www.tid.es)\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/telefonicaid/logops.git"
  },
  "scripts": {
    "changelog": "conventional-changelog -p jshint",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R dot test/environment.js test/*.spec.js",
    "lint": "jscs lib && eslint lib && tslint './{lib,test}/**/*.ts'",
    "release": "release-it",
    "test": "mocha -R spec test/environment.js test/*.spec.js && tsc --noEmit",
    "travis": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec test/environment.js test/*.spec.js && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage && tsc --noEmit"
  },
  "typings": "./lib/logops.d.ts",
  "version": "2.0.0"
}
